class Solution {
    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
        // Assumption: has duplications!!!!!
        
        // thougth: method recursion
        // ask null or targeted node value from children; if two nodes found, return current node
        // send null or targeted node value to parent
        
        // base case: return null if root == null
        //             return TreeNode if root == target node
     
        if (root == null || root == p || root == q) { //!!! use TreeNode itself to avoid node with duplicate value.
            return root;
        }
        
        TreeNode left = lowestCommonAncestor(root.left, p, q);
        TreeNode right = lowestCommonAncestor(root.right, p, q);
        
        if (left != null && right != null) {
            return root;
        } else if (left != null) {
            return left;
        } else {
            return right;
        }
    }
}
