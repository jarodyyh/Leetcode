class Solution {
    public int minimumTotal(List<List<Integer>> triangle) {
        // using DP: O(n) extra space, 
        // Two method: 从上往下， 找最后一行最小值Time O(n + n(min))
        //              从上往下， 返回第一个值！！！！！！
        
        // method 从下往上
        int depth = triangle.size();
        int[] result = new int[depth + 1];
        
        for (int i = depth - 1; i >= 0; i--) {
            for (int j = 0; j <= i; j++) {
                result[j] = triangle.get(i).get(j) + Math.min(result[j], result[j + 1]);
            }
        }
        
        return result[0];
    }
    
    
    
            // method 从上往下
        if (triangle == null) {
            return -1;
        }
        
        int depth = triangle.size();
        int[] result = new int[depth];
        
        for (int i = 0; i < depth; i++) {
            for (int j = i; j >= 0; j--) {
                if (j != 0 && j != i) {
                    result[j] = triangle.get(i).get(j) + Math.min(result[j - 1], result[j]);
                } else if (j == 0 && i == 0) {
                    result[j] = triangle.get(i).get(j);
                } else if (j == i) {
                    result[j] = triangle.get(i).get(j) + result[j - 1];
                } else if (j == 0) {
                    result[j] = triangle.get(i).get(j) + result[j];
                }
            }
        }
        return findMin(result);
    }
    
    private int findMin(int[] results) {
        int n = results.length;
        int globalMin = Integer.MAX_VALUE;
        for (int i = 0; i < n; i++) {
            if (results[i] < globalMin) {
                globalMin = results[i];
            }
        }
        return globalMin;
    }
}
