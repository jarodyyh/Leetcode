class Solution {
    public List<Double> averageOfLevels(TreeNode root) {
        // method is iterate tree level by level, and calculate the average of each level
        // should use BFS
        
        List<Double> results = new ArrayList<Double>();
        
        if (root == null) {
            return results;
        }
        
        // use a queue to store treenodes
        Queue<TreeNode> queue = new LinkedList<TreeNode>();
        // add root to queue:
        queue.offer(root);
        
        while (!queue.isEmpty()) {
            // calcualte level by level, need to maintain the size
            int size = queue.size();
            long sum  = 0;
            for (int i = 0; i < size; i++) {
                TreeNode cur = queue.poll();
                sum += cur.val;
                if (cur.left != null ) {
                    queue.offer(cur.left);
                } 
                if (cur.right != null) {
                    queue.offer(cur.right);
                }
            }
            Double avg = 1.0 * sum / size;
            results.add(avg);
        }
        
        return results;
    }
}
