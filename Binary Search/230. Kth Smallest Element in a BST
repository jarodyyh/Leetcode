/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public int kthSmallest(TreeNode root, int k) {
        // thought: method 1: convert BST to array using in-order traverse
        // method 2: binary search, compare left subtree size with k, if >, keep check lefter subtree; if <, check right subtree to add to k
        
        int count = countNode(root.left);
        
        if (count >= k) {
            return kthSmallest(root.left, k);
        } else if (count + 1 < k) {
            return kthSmallest(root.right, k - count - 1);
        }
        return root.val;
    }
    
    private int countNode(TreeNode root) {
        if (root == null) {
            return 0;
        }
        
        return 1 + countNode(root.left) + countNode(root.right);
    }
}
